
rule Import_ReferenceSequences :
    conda :
        "../../envs/QIIME2-2019.04.yml"
    input :
        config["amplicons_refpath_seq"]
    output :
        "QualityControl/Amplicons_reference_seq.qza"
    threads :
        1
    shell :
         '''
        qiime tools import \
        --type 'FeatureData[Sequence]' \
        --input-path {input} \
        --output-path {output} 
        '''

rule Import_Vsearch_QuerySequences :
    conda :
        "../../envs/QIIME2-2019.04.yml"
    input :
        "vsearch/1b_q_score_filtered_paired/{sample}_trimmed_paired.fasta"
    output :
        "QualityControl/vsearch_{sample}_query_seq.qza"
    threads :
        1
    shell :
         '''
        qiime tools import \
        --type 'FeatureData[Sequence]' \
        --input-path {input} \
        --output-path {output} 
        '''

rule file_DADA2 :
    conda :
        "../../envs/DADA2_in_R.yml"
    input :
        DADA2_seq = lambda wildcards: expand("DADA2/2_denoised/{RUN}/{{sample}}_infer_seq_tab.rds", RUN = all_samples[config["run_column"]][all_samples.index.values==wildcards.sample])
    output :
        rep_seqs = "QualityControl/DADA2_{sample}_sequence.fasta"
    threads :
        1
    params :
        sample = lambda wildcards : wildcards.sample
    log:
        logging_folder + "QualityControl/DADA2_{sample}_sequence.txt"
    script :
        "scripts/create_file_DADA2.R"


rule Import_DADA2_QuerySequences :
    conda :
        "../../envs/QIIME2-2019.04.yml"
    input :
        rep_seqs = "QualityControl/DADA2_{sample}_sequence.fasta"
    output :
        "QualityControl/DADA2_{sample}_query_seq.qza"
    threads :
        1
    shell :
         '''
        qiime tools import \
        --type 'FeatureData[Sequence]' \
        --input-path {input[rep_seqs]} \
        --output-path {output} 
        '''

rule  Quality_Control :
    conda :
        "../../envs/QIIME2-2019.04.yml"
    input :
        Amplicons = "QualityControl/Amplicons_reference_seq.qza",
        Query = "QualityControl/{methode}_{sample}_query_seq.qza"
    output :
        "QualityControl/{methode}_{sample}_eval_seqs_test.qzv"
    threads :
        1
    shell :
         '''
        qiime quality-control evaluate-seqs \
        --i-query-sequences {input[Query]} \
        --i-reference-sequences {input[Amplicons]} \
        --o-visualization {output}
         '''

